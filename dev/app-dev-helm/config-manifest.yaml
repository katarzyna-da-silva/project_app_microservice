---
# Source: app-dev-helm/templates/mongodb.yaml
# Configuration pour le service MongoDB
kind: Service  # Type de ressource, ici un Service
apiVersion: v1  # Version de l'API pour le service
metadata:
  name: fleetman-mongodb  # Nom du service
spec:
  selector:
    app: mongodb  # Label pour sélectionner les pods
  ports:
    - name: mongoport  # Nom du port
      port: 27017  # Port exposé par le service
  type: ClusterIP  # Type du service (ClusterIP, NodePort, LoadBalancer)
---
# Source: app-dev-helm/templates/services-all.yaml
# Service pour fleetman-webapp
apiVersion: v1 # Version de l'API pour le service
kind: Service # Type de ressource, ici un Service
metadata:
  name: fleetman-webapp # Nom du service

spec:
  selector:
    app: webapp  # Label pour sélectionner les pods

  ports: # Nom du port
    - name:  http
      port: 80 # Port exposé par le service
      nodePort: 30081  # NodePort pour l'accès externe (type NodePort requis)

  type: NodePort
---
# Source: app-dev-helm/templates/services-all.yaml
# Service pour fleetman-queue
apiVersion: v1
kind: Service
metadata:
  name: fleetman-queue

spec:
  selector:
    app: queue

  ports:
    - name: http
      port: 8161
      targetPort: 8161
      nodePort: 30031
    - name: endpoint
      port: 61616

  type: NodePort
---
# Source: app-dev-helm/templates/services-all.yaml
# Service pour fleetman-position-tracker
apiVersion: v1
kind: Service
metadata:
  name: fleetman-position-tracker

spec:
  selector:
    app: position-tracker

  ports:
    - name: http
      port: 8080
     # nodePort: 30022
 # type: NodePort
  type: ClusterIP
---
# Source: app-dev-helm/templates/services-all.yaml
# Service pour fleetman-api-gateway
apiVersion: v1
kind: Service
metadata:
  name: fleetman-api-gateway

spec:
  selector:
    app: api-gateway

  ports:
    - name: http
      port: 8080
      nodePort: 30020

  type: NodePort
---
# Source: app-dev-helm/templates/deploymentall.yaml
# Configuration pour les déploiements Kubernetes

# Définition du premier déploiement
apiVersion: apps/v1  # Version de l'API Kubernetes
kind: Deployment  # Type de ressource, par exemple, "Deployment"
metadata:
  name: queue-deployment # Nom du déploiement
spec:
  selector:
    matchLabels:
      app: queue  # Étiquette utilisée pour sélectionner les pods
  replicas: 1  # Nombre de réplicas
  template: # template for the pods
    metadata:
      labels:
        app: queue  # Étiquette pour les pods
    spec:
      containers:
      - name: queue-container  # Nom du conteneur
        image: katarzynadasilva/queue-katarzyna:tagname # Image Docker à utiliser
        resources:
          requests:
            memory: 400Mi  # Quantité de mémoire demandée
            cpu: 200m  # Quantité de CPU demandée
---
# Source: app-dev-helm/templates/deploymentall.yaml
# Définition du deuxième déploiement
apiVersion: apps/v1
kind: Deployment
metadata:
  name: position-simulator-deployment
spec:
  selector:
    matchLabels:
      app: position-simulator
  replicas: 1
  template: # template for the pods
    metadata:
      labels:
        app: position-simulator
    spec:
      containers:
      - name: position-simulator-container
        image: katarzynadasilva/katarzyna-position-simulator:tagname
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: production-microservice
        resources:
          requests:
            memory: 600Mi
            cpu: 600m
---
# Source: app-dev-helm/templates/deploymentall.yaml
# Définition du troisième déploiement
apiVersion: apps/v1
kind: Deployment
metadata:
  name: position-tracker-deployment
spec:
  selector:
    matchLabels:
      app: position-tracker
  replicas: 1
  template: # template for the pods
    metadata:
      labels:
        app: position-tracker
    spec:
      containers:
      - name: position-tracker-container
        image: katarzynadasilva/katarzyna-position-tracker:tagname
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: production-microservice
        resources:
          requests:
            memory: 600Mi
            cpu: 50m
---
# Source: app-dev-helm/templates/deploymentall.yaml
# Définition du quatrième déploiement

apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway-deployment
spec:
  selector:
    matchLabels:
      app: api-gateway
  replicas: 1
  template: # template for the pods
    metadata:
      labels:
        app: api-gateway
    spec:
      containers:
      - name: api-gateway-container
        image: katarzynadasilva/katarzyna-api-gateway:tagname
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: production-microservice
        resources:
          requests:
            memory: 1000Mi
            cpu: 50m
---
# Source: app-dev-helm/templates/deploymentall.yaml
# Définition du cinquième déploiement
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp-deployment
spec:
  selector:
    matchLabels:
      app: webapp
  replicas: 1
  template:
    metadata:
      labels:
        app: webapp
    spec:
      containers:
      - name: webapp-container
        image: katarzynadasilva/katarzyna-webapp:tagname
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: production-microservice
        resources:
          requests:
            memory: 100Mi
            cpu: 50m
---
# Source: app-dev-helm/templates/mongodb.yaml
# Configuration pour le déploiement MongoDB

apiVersion: apps/v1  # Version de l'API pour le déploiement
kind: Deployment  # Type de ressource, ici un Déploiement
metadata:
  name: mongodb-deployment  # Nom du déploiement
spec:
  selector:
    matchLabels:
      app: mongodb  # Label pour sélectionner les pods
  replicas: 1  # Nombre de réplicas (pods)
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:3.6.23  # Image Docker à utiliser pour le conteneur
        volumeMounts:
          - name: mongo-persistent-storage  # Nom du volume monté
            mountPath: /data/db  # Chemin de montage du volume dans le conteneur
        resources: 
          requests: 
            memory: 400Mi
            cpu: 100m
      volumes:
        - name: mongo-persistent-storage
          hostPath:    # données stockées en dehors du pod si kubectl est supprimé
           path: /mnt/some/directory/structure/     # for vm minikube 
           type: DirectoryOrCreate  # Crée le répertoire s'il n'existe pas
---
# Source: app-dev-helm/templates/hpa-autoscaling.yaml
# Configuration pour l'autoscaler horizontal des pods

apiVersion: autoscaling/v1 # Version de l'API pour lautoscaler horizontal
kind: HorizontalPodAutoscaler # Type de ressource, ici un autoscaler horizontal
metadata:
  name: api-gateway # Nom de lautoscaler
  namespace: default # Namespace où lautoscaler est déployé
spec:
  maxReplicas: 4 # Nombre max de réplicas
  minReplicas: 1 # Nombre min de réplicas
  scaleTargetRef:
    apiVersion: apps/v1 # Version de l'API pour la référence de l'objectif de mise à l'échelle
    kind: Deployment # Type de ressource à mettre à l'échelle, ici un déploiement
    name: api-gateway # Nom du déploiement à mettre à l'échelle
  targetCPUUtilizationPercentage: 400 # Seuil de l'utilisation du CPU pour le déclenchement de la mise à l'échelle